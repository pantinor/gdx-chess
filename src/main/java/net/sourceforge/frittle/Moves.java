/*
Frittle - Chess Engine for WinBoard/XBoard [http://frittle.sourceforge.net]
Copyright (C) 2009 Rohan Padhye <verminox@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.sourceforge.frittle;

/**
 * This class provides useful static methods to
 * find legal moves to and from a square for a particular piece
 * given the complete game state.
 */
public class Moves
{
    /**
     * Privatize constructor to avoid creating objects of this class
     */
    private Moves(){}
	
	/**
	 * Searches a move array to see if the destination is within it.
	 * @param	array		the move array to search
	 * @param	source		the source square
	 * @param	dest		the destination square
	 * @return	whether or not the piece can move from source to dest (does not consider obstacles in the way of a slider)
	 * @see 	slidable
	 */
	public static boolean movable(byte[][] array, byte source, byte dest)
	{
		for(byte i=0; i<array[source].length; i++)
		{
			if(array[source][i]==dest)
				return true;
		}
		return false;
	}
	
	/**
	 * Determines whether the index in the ray is reachable.
	 * It is assumed that the target square is empty or occupied by an enemy.
	 *
	 * @param	ray		the move ray to lookup
	 * @param	source	the source square
	 * @param 	dest	the target square
	 * @param	state	the current GameState object'
	 * @return	TRUE if it is reachable or FALSE otherwise
	 */
	public static boolean slideable(byte[][] ray, byte source, byte dest, GameState state)
	{
		// First lets see if the target is present in the ray at all (movable) and get the index if present
		byte index = -1;
		for(byte i=0; i<ray[source].length; i++)
		{
			if(ray[source][i]==dest)
			{
				index = i;
				break;
			}
		}
		if(index < 0) // Not even movable
			return false;
		
		// Now that we have the index of the target in the ray, lets see if there are any obstacles in its way
		for(byte i=0; i<index; i++)
		{
			if( state.getBoard()[ray[source][i]] != null ) // there is a piece in the way
				return false;
		}
		return true;
	}

    /**
     * Determines whether the given piece type can move along the given ray
     * @param   type    the type of the piece
     * @param   ray     the movable ray
     * @return <code>true</code> if the given piecetype can move through the ray
     */
    public static boolean usesRay(PieceType type, byte[][] ray)
    {
        switch(type)
        {
            case BISHOP:
                for(int i=0; i<bishop.length; i++)
                {
                    if(ray == bishop[i])
                        return true;
                }
                break;
            case ROOK:
                for(int i=0; i<rook.length; i++)
                {
                    if(ray == rook[i])
                        return true;
                }
                break;
            case QUEEN:
                for(int i=0; i<queen.length; i++)
                {
                    if(ray == queen[i])
                        return true;
                }
                break;
        }
        return false;
    }

    /**
	 * Converts the given conventional co-ordinate to array index for board[].
	 *
	 * @param coord		coordinate of the position [a-h][q-8]
	 * @return			array index for board [0-63]
	 */
     public static byte toIndex(String coord)
     {
         char file = coord.charAt(0);
         byte rank = Byte.parseByte(coord.substring(1));
         return toIndex(file, rank);
     }

	/**
	 * Converts the given conventional co-ordinate to array index for board[].
	 *
	 * @param file		file of the position [a-h]
	 * @param rank		rank of the position [1-8]
	 * @return			array index for board [0-63]
	 */
	public static byte toIndex(char file, byte rank)
	{
		Character F = new Character(file);
		int f = F.compareTo('a');
		return (byte)((8-rank)*8 + f);
	}
	
	/**
	 * Converts given array index for board[] to conventional co-ordinate
	 *
	 * @param index		crray index of position [0-63]
	 * @return 			conventional co-ordinate (eg. e4)
	 */
	public static String toCoOrdinate(byte index)
	{
		return toFile(index) + "" + toRank(index);
	}

    /**
     * Gets the rank index for the given board[] index
     *
     * @param   index   array index of position [0-63]
     * @return  rank index of the position [0-7]
     */
    public static int toRankIndex(int index)
    {
        return (7 - index/8); // 0-7
    }

    /**
     * Gets the rank of the given board[] index
     *
     * @param   index   array index of position [0-63]
     * @return  rank of the position [1-8]
     */
    public static int toRank(byte index)
    {
        return (8 - index/8); // 1-8
    }

    /**
     * Gets the file index of the given board[] index
     *
     * @param   index   array index of position [0-63]
     * @return  file index of the position [0-7]
     */
    public static int toFileIndex(int index)
    {
        return (index%8); // 0-7
    }

    /**
     * Gets the file of the given board[] index
     *
     * @param   index   array index of position [0-63]
     * @return  file  of the position ['a'-'h']
     */
    public static char toFile(byte index)
    {
		char file = 'a';
		file += toFileIndex(index); // += 0-7
        return file;
    }

	/**
	 * Possible moves
	 */
	public static final byte north[][] = {
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ 0 },
		{ 1 },
		{ 2 },
		{ 3 },
		{ 4 },
		{ 5 },
		{ 6 },
		{ 7 },
		{ 8, 0 },
		{ 9, 1 },
		{ 10, 2 },
		{ 11, 3 },
		{ 12, 4 },
		{ 13, 5 },
		{ 14, 6 },
		{ 15, 7 },
		{ 16, 8, 0 },
		{ 17, 9, 1 },
		{ 18, 10, 2 },
		{ 19, 11, 3 },
		{ 20, 12, 4 },
		{ 21, 13, 5 },
		{ 22, 14, 6 },
		{ 23, 15, 7 },
		{ 24, 16, 8, 0 },
		{ 25, 17, 9, 1 },
		{ 26, 18, 10, 2 },
		{ 27, 19, 11, 3 },
		{ 28, 20, 12, 4 },
		{ 29, 21, 13, 5 },
		{ 30, 22, 14, 6 },
		{ 31, 23, 15, 7 },
		{ 32, 24, 16, 8, 0 },
		{ 33, 25, 17, 9, 1 },
		{ 34, 26, 18, 10, 2 },
		{ 35, 27, 19, 11, 3 },
		{ 36, 28, 20, 12, 4 },
		{ 37, 29, 21, 13, 5 },
		{ 38, 30, 22, 14, 6 },
		{ 39, 31, 23, 15, 7 },
		{ 40, 32, 24, 16, 8, 0 },
		{ 41, 33, 25, 17, 9, 1 },
		{ 42, 34, 26, 18, 10, 2 },
		{ 43, 35, 27, 19, 11, 3 },
		{ 44, 36, 28, 20, 12, 4 },
		{ 45, 37, 29, 21, 13, 5 },
		{ 46, 38, 30, 22, 14, 6 },
		{ 47, 39, 31, 23, 15, 7 },
		{ 48, 40, 32, 24, 16, 8, 0 },
		{ 49, 41, 33, 25, 17, 9, 1 },
		{ 50, 42, 34, 26, 18, 10, 2 },
		{ 51, 43, 35, 27, 19, 11, 3 },
		{ 52, 44, 36, 28, 20, 12, 4 },
		{ 53, 45, 37, 29, 21, 13, 5 },
		{ 54, 46, 38, 30, 22, 14, 6 },
		{ 55, 47, 39, 31, 23, 15, 7 }
	};

	public static final byte east[][] = {
		{ 1, 2, 3, 4, 5, 6, 7 },
		{ 2, 3, 4, 5, 6, 7 },
		{ 3, 4, 5, 6, 7 },
		{ 4, 5, 6, 7 },
		{ 5, 6, 7 },
		{ 6, 7 },
		{ 7 },
		{ },
		{ 9, 10, 11, 12, 13, 14, 15 },
		{ 10, 11, 12, 13, 14, 15 },
		{ 11, 12, 13, 14, 15 },
		{ 12, 13, 14, 15 },
		{ 13, 14, 15 },
		{ 14, 15 },
		{ 15 },
		{ },
		{ 17, 18, 19, 20, 21, 22, 23 },
		{ 18, 19, 20, 21, 22, 23 },
		{ 19, 20, 21, 22, 23 },
		{ 20, 21, 22, 23 },
		{ 21, 22, 23 },
		{ 22, 23 },
		{ 23 },
		{ },
		{ 25, 26, 27, 28, 29, 30, 31 },
		{ 26, 27, 28, 29, 30, 31 },
		{ 27, 28, 29, 30, 31 },
		{ 28, 29, 30, 31 },
		{ 29, 30, 31 },
		{ 30, 31 },
		{ 31 },
		{ },
		{ 33, 34, 35, 36, 37, 38, 39 },
		{ 34, 35, 36, 37, 38, 39 },
		{ 35, 36, 37, 38, 39 },
		{ 36, 37, 38, 39 },
		{ 37, 38, 39 },
		{ 38, 39 },
		{ 39 },
		{ },
		{ 41, 42, 43, 44, 45, 46, 47 },
		{ 42, 43, 44, 45, 46, 47 },
		{ 43, 44, 45, 46, 47 },
		{ 44, 45, 46, 47 },
		{ 45, 46, 47 },
		{ 46, 47 },
		{ 47 },
		{ },
		{ 49, 50, 51, 52, 53, 54, 55 },
		{ 50, 51, 52, 53, 54, 55 },
		{ 51, 52, 53, 54, 55 },
		{ 52, 53, 54, 55 },
		{ 53, 54, 55 },
		{ 54, 55 },
		{ 55 },
		{ },
		{ 57, 58, 59, 60, 61, 62, 63 },
		{ 58, 59, 60, 61, 62, 63 },
		{ 59, 60, 61, 62, 63 },
		{ 60, 61, 62, 63 },
		{ 61, 62, 63 },
		{ 62, 63 },
		{ 63 },
		{ }
	};

	public static final byte south[][] = {
		{ 8, 16, 24, 32, 40, 48, 56 },
		{ 9, 17, 25, 33, 41, 49, 57 },
		{ 10, 18, 26, 34, 42, 50, 58 },
		{ 11, 19, 27, 35, 43, 51, 59 },
		{ 12, 20, 28, 36, 44, 52, 60 },
		{ 13, 21, 29, 37, 45, 53, 61 },
		{ 14, 22, 30, 38, 46, 54, 62 },
		{ 15, 23, 31, 39, 47, 55, 63 },
		{ 16, 24, 32, 40, 48, 56 },
		{ 17, 25, 33, 41, 49, 57 },
		{ 18, 26, 34, 42, 50, 58 },
		{ 19, 27, 35, 43, 51, 59 },
		{ 20, 28, 36, 44, 52, 60 },
		{ 21, 29, 37, 45, 53, 61 },
		{ 22, 30, 38, 46, 54, 62 },
		{ 23, 31, 39, 47, 55, 63 },
		{ 24, 32, 40, 48, 56 },
		{ 25, 33, 41, 49, 57 },
		{ 26, 34, 42, 50, 58 },
		{ 27, 35, 43, 51, 59 },
		{ 28, 36, 44, 52, 60 },
		{ 29, 37, 45, 53, 61 },
		{ 30, 38, 46, 54, 62 },
		{ 31, 39, 47, 55, 63 },
		{ 32, 40, 48, 56 },
		{ 33, 41, 49, 57 },
		{ 34, 42, 50, 58 },
		{ 35, 43, 51, 59 },
		{ 36, 44, 52, 60 },
		{ 37, 45, 53, 61 },
		{ 38, 46, 54, 62 },
		{ 39, 47, 55, 63 },
		{ 40, 48, 56 },
		{ 41, 49, 57 },
		{ 42, 50, 58 },
		{ 43, 51, 59 },
		{ 44, 52, 60 },
		{ 45, 53, 61 },
		{ 46, 54, 62 },
		{ 47, 55, 63 },
		{ 48, 56 },
		{ 49, 57 },
		{ 50, 58 },
		{ 51, 59 },
		{ 52, 60 },
		{ 53, 61 },
		{ 54, 62 },
		{ 55, 63 },
		{ 56 },
		{ 57 },
		{ 58 },
		{ 59 },
		{ 60 },
		{ 61 },
		{ 62 },
		{ 63 },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ }
	};

	public static final byte west[][] = {
		{ },
		{ 0 },
		{ 1, 0 },
		{ 2, 1, 0 },
		{ 3, 2, 1, 0 },
		{ 4, 3, 2, 1, 0 },
		{ 5, 4, 3, 2, 1, 0 },
		{ 6, 5, 4, 3, 2, 1, 0 },
		{ },
		{ 8 },
		{ 9, 8 },
		{ 10, 9, 8 },
		{ 11, 10, 9, 8 },
		{ 12, 11, 10, 9, 8 },
		{ 13, 12, 11, 10, 9, 8 },
		{ 14, 13, 12, 11, 10, 9, 8 },
		{ },
		{ 16 },
		{ 17, 16 },
		{ 18, 17, 16 },
		{ 19, 18, 17, 16 },
		{ 20, 19, 18, 17, 16 },
		{ 21, 20, 19, 18, 17, 16 },
		{ 22, 21, 20, 19, 18, 17, 16 },
		{ },
		{ 24 },
		{ 25, 24 },
		{ 26, 25, 24 },
		{ 27, 26, 25, 24 },
		{ 28, 27, 26, 25, 24 },
		{ 29, 28, 27, 26, 25, 24 },
		{ 30, 29, 28, 27, 26, 25, 24 },
		{ },
		{ 32 },
		{ 33, 32 },
		{ 34, 33, 32 },
		{ 35, 34, 33, 32 },
		{ 36, 35, 34, 33, 32 },
		{ 37, 36, 35, 34, 33, 32 },
		{ 38, 37, 36, 35, 34, 33, 32 },
		{ },
		{ 40 },
		{ 41, 40 },
		{ 42, 41, 40 },
		{ 43, 42, 41, 40 },
		{ 44, 43, 42, 41, 40 },
		{ 45, 44, 43, 42, 41, 40 },
		{ 46, 45, 44, 43, 42, 41, 40 },
		{ },
		{ 48 },
		{ 49, 48 },
		{ 50, 49, 48 },
		{ 51, 50, 49, 48 },
		{ 52, 51, 50, 49, 48 },
		{ 53, 52, 51, 50, 49, 48 },
		{ 54, 53, 52, 51, 50, 49, 48 },
		{ },
		{ 56 },
		{ 57, 56 },
		{ 58, 57, 56 },
		{ 59, 58, 57, 56 },
		{ 60, 59, 58, 57, 56 },
		{ 61, 60, 59, 58, 57, 56 },
		{ 62, 61, 60, 59, 58, 57, 56 }
	};
	
	public static final byte rook[][][] = { north, east, south, west };

	public static final byte northWest[][] = {
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ 0 },
		{ 1 },
		{ 2 },
		{ 3 },
		{ 4 },
		{ 5 },
		{ 6 },
		{ },
		{ 8 },
		{ 9, 0 },
		{ 10, 1 },
		{ 11, 2 },
		{ 12, 3 },
		{ 13, 4 },
		{ 14, 5 },
		{ },
		{ 16 },
		{ 17, 8 },
		{ 18, 9, 0 },
		{ 19, 10, 1 },
		{ 20, 11, 2 },
		{ 21, 12, 3 },
		{ 22, 13, 4 },
		{ },
		{ 24 },
		{ 25, 16 },
		{ 26, 17, 8 },
		{ 27, 18, 9, 0 },
		{ 28, 19, 10, 1 },
		{ 29, 20, 11, 2 },
		{ 30, 21, 12, 3 },
		{ },
		{ 32 },
		{ 33, 24 },
		{ 34, 25, 16 },
		{ 35, 26, 17, 8 },
		{ 36, 27, 18, 9, 0 },
		{ 37, 28, 19, 10, 1 },
		{ 38, 29, 20, 11, 2 },
		{ },
		{ 40 },
		{ 41, 32 },
		{ 42, 33, 24 },
		{ 43, 34, 25, 16 },
		{ 44, 35, 26, 17, 8 },
		{ 45, 36, 27, 18, 9, 0 },
		{ 46, 37, 28, 19, 10, 1 },
		{ },
		{ 48 },
		{ 49, 40 },
		{ 50, 41, 32 },
		{ 51, 42, 33, 24 },
		{ 52, 43, 34, 25, 16 },
		{ 53, 44, 35, 26, 17, 8 },
		{ 54, 45, 36, 27, 18, 9, 0 }
	};

	public static final byte northEast[][] = {
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ 1 },
		{ 2 },
		{ 3 },
		{ 4 },
		{ 5 },
		{ 6 },
		{ 7 },
		{ },
		{ 9, 2 },
		{ 10, 3 },
		{ 11, 4 },
		{ 12, 5 },
		{ 13, 6 },
		{ 14, 7 },
		{ 15 },
		{ },
		{ 17, 10, 3 },
		{ 18, 11, 4 },
		{ 19, 12, 5 },
		{ 20, 13, 6 },
		{ 21, 14, 7 },
		{ 22, 15 },
		{ 23 },
		{ },
		{ 25, 18, 11, 4 },
		{ 26, 19, 12, 5 },
		{ 27, 20, 13, 6 },
		{ 28, 21, 14, 7 },
		{ 29, 22, 15 },
		{ 30, 23 },
		{ 31 },
		{ },
		{ 33, 26, 19, 12, 5 },
		{ 34, 27, 20, 13, 6 },
		{ 35, 28, 21, 14, 7 },
		{ 36, 29, 22, 15 },
		{ 37, 30, 23 },
		{ 38, 31 },
		{ 39 },
		{ },
		{ 41, 34, 27, 20, 13, 6 },
		{ 42, 35, 28, 21, 14, 7 },
		{ 43, 36, 29, 22, 15 },
		{ 44, 37, 30, 23 },
		{ 45, 38, 31 },
		{ 46, 39 },
		{ 47 },
		{ },
		{ 49, 42, 35, 28, 21, 14, 7 },
		{ 50, 43, 36, 29, 22, 15 },
		{ 51, 44, 37, 30, 23 },
		{ 52, 45, 38, 31 },
		{ 53, 46, 39 },
		{ 54, 47 },
		{ 55 },
		{ }
	};

	public static final byte southEast[][] = {
		{ 9, 18, 27, 36, 45, 54, 63 },
		{ 10, 19, 28, 37, 46, 55 },
		{ 11, 20, 29, 38, 47 },
		{ 12, 21, 30, 39 },
		{ 13, 22, 31 },
		{ 14, 23 },
		{ 15 },
		{ },
		{ 17, 26, 35, 44, 53, 62 },
		{ 18, 27, 36, 45, 54, 63 },
		{ 19, 28, 37, 46, 55 },
		{ 20, 29, 38, 47 },
		{ 21, 30, 39 },
		{ 22, 31 },
		{ 23 },
		{ },
		{ 25, 34, 43, 52, 61 },
		{ 26, 35, 44, 53, 62 },
		{ 27, 36, 45, 54, 63 },
		{ 28, 37, 46, 55 },
		{ 29, 38, 47 },
		{ 30, 39 },
		{ 31 },
		{ },
		{ 33, 42, 51, 60 },
		{ 34, 43, 52, 61 },
		{ 35, 44, 53, 62 },
		{ 36, 45, 54, 63 },
		{ 37, 46, 55 },
		{ 38, 47 },
		{ 39 },
		{ },
		{ 41, 50, 59 },
		{ 42, 51, 60 },
		{ 43, 52, 61 },
		{ 44, 53, 62 },
		{ 45, 54, 63 },
		{ 46, 55 },
		{ 47 },
		{ },
		{ 49, 58 },
		{ 50, 59 },
		{ 51, 60 },
		{ 52, 61 },
		{ 53, 62 },
		{ 54, 63 },
		{ 55 },
		{ },
		{ 57 },
		{ 58 },
		{ 59 },
		{ 60 },
		{ 61 },
		{ 62 },
		{ 63 },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ }
	};

	public static final byte southWest[][] = {
		{ },
		{ 8 },
		{ 9, 16 },
		{ 10, 17, 24 },
		{ 11, 18, 25, 32 },
		{ 12, 19, 26, 33, 40 },
		{ 13, 20, 27, 34, 41, 48 },
		{ 14, 21, 28, 35, 42, 49, 56 },
		{ },
		{ 16 },
		{ 17, 24 },
		{ 18, 25, 32 },
		{ 19, 26, 33, 40 },
		{ 20, 27, 34, 41, 48 },
		{ 21, 28, 35, 42, 49, 56 },
		{ 22, 29, 36, 43, 50, 57 },
		{ },
		{ 24 },
		{ 25, 32 },
		{ 26, 33, 40 },
		{ 27, 34, 41, 48 },
		{ 28, 35, 42, 49, 56 },
		{ 29, 36, 43, 50, 57 },
		{ 30, 37, 44, 51, 58 },
		{ },
		{ 32 },
		{ 33, 40 },
		{ 34, 41, 48 },
		{ 35, 42, 49, 56 },
		{ 36, 43, 50, 57 },
		{ 37, 44, 51, 58 },
		{ 38, 45, 52, 59 },
		{ },
		{ 40 },
		{ 41, 48 },
		{ 42, 49, 56 },
		{ 43, 50, 57 },
		{ 44, 51, 58 },
		{ 45, 52, 59 },
		{ 46, 53, 60 },
		{ },
		{ 48 },
		{ 49, 56 },
		{ 50, 57 },
		{ 51, 58 },
		{ 52, 59 },
		{ 53, 60 },
		{ 54, 61 },
		{ },
		{ 56 },
		{ 57 },
		{ 58 },
		{ 59 },
		{ 60 },
		{ 61 },
		{ 62 },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ }
	};
	
	public static final byte bishop[][][] = { northWest, northEast, southEast, southWest };

	public static final byte queen[][][] = { north, east, south, west, northWest, northEast, southEast, southWest };

	public static final byte knight[][] = {
		{ 10, 17 },
		{ 11, 16, 18 },
		{ 8, 12, 17, 19 },
		{ 9, 13, 18, 20 },
		{ 10, 14, 19, 21 },
		{ 11, 15, 20, 22 },
		{ 12, 21, 23 },
		{ 13, 22 },
		{ 18, 2, 25 },
		{ 19, 3, 24, 26 },
		{ 0, 16, 20, 4, 25, 27 },
		{ 1, 17, 21, 5, 26, 28 },
		{ 2, 18, 22, 6, 27, 29 },
		{ 3, 19, 23, 7, 28, 30 },
		{ 4, 20, 29, 31 },
		{ 5, 21, 30 },
		{ 26, 10, 33, 1 },
		{ 27, 11, 0, 32, 34, 2 },
		{ 8, 24, 28, 12, 1, 33, 35, 3 },
		{ 9, 25, 29, 13, 2, 34, 36, 4 },
		{ 10, 26, 30, 14, 3, 35, 37, 5 },
		{ 11, 27, 31, 15, 4, 36, 38, 6 },
		{ 12, 28, 5, 37, 39, 7 },
		{ 13, 29, 6, 38 },
		{ 34, 18, 41, 9 },
		{ 35, 19, 8, 40, 42, 10 },
		{ 16, 32, 36, 20, 9, 41, 43, 11 },
		{ 17, 33, 37, 21, 10, 42, 44, 12 },
		{ 18, 34, 38, 22, 11, 43, 45, 13 },
		{ 19, 35, 39, 23, 12, 44, 46, 14 },
		{ 20, 36, 13, 45, 47, 15 },
		{ 21, 37, 14, 46 },
		{ 42, 26, 49, 17 },
		{ 43, 27, 16, 48, 50, 18 },
		{ 24, 40, 44, 28, 17, 49, 51, 19 },
		{ 25, 41, 45, 29, 18, 50, 52, 20 },
		{ 26, 42, 46, 30, 19, 51, 53, 21 },
		{ 27, 43, 47, 31, 20, 52, 54, 22 },
		{ 28, 44, 21, 53, 55, 23 },
		{ 29, 45, 22, 54 },
		{ 50, 34, 57, 25 },
		{ 51, 35, 24, 56, 58, 26 },
		{ 32, 48, 52, 36, 25, 57, 59, 27 },
		{ 33, 49, 53, 37, 26, 58, 60, 28 },
		{ 34, 50, 54, 38, 27, 59, 61, 29 },
		{ 35, 51, 55, 39, 28, 60, 62, 30 },
		{ 36, 52, 29, 61, 63, 31 },
		{ 37, 53, 30, 62 },
		{ 58, 42, 33 },
		{ 59, 43, 32, 34 },
		{ 40, 56, 60, 44, 33, 35 },
		{ 41, 57, 61, 45, 34, 36 },
		{ 42, 58, 62, 46, 35, 37 },
		{ 43, 59, 63, 47, 36, 38 },
		{ 44, 60, 37, 39 },
		{ 45, 61, 38 },
		{ 50, 41 },
		{ 51, 40, 42 },
		{ 48, 52, 41, 43 },
		{ 49, 53, 42, 44 },
		{ 50, 54, 43, 45 },
		{ 51, 55, 44, 46 },
		{ 52, 45, 47 },
		{ 53, 46 }
	};

	public static final byte pawnW[][] = {
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ 0 },
		{ 1 },
		{ 2 },
		{ 3 },
		{ 4 },
		{ 5 },
		{ 6 },
		{ 7 },
		{ 8 },
		{ 9 },
		{ 10 },
		{ 11 },
		{ 12 },
		{ 13 },
		{ 14 },
		{ 15 },
		{ 16 },
		{ 17 },
		{ 18 },
		{ 19 },
		{ 20 },
		{ 21 },
		{ 22 },
		{ 23 },
		{ 24 },
		{ 25 },
		{ 26 },
		{ 27 },
		{ 28 },
		{ 29 },
		{ 30 },
		{ 31 },
		{ 32 },
		{ 33 },
		{ 34 },
		{ 35 },
		{ 36 },
		{ 37 },
		{ 38 },
		{ 39 },
		{ 40, 32 },
		{ 41, 33 },
		{ 42, 34 },
		{ 43, 35 },
		{ 44, 36 },
		{ 45, 37 },
		{ 46, 38 },
		{ 47, 39 },
		{ 48 },
		{ 49 },
		{ 50 },
		{ 51 },
		{ 52 },
		{ 53 },
		{ 54 },
		{ 55 }
	};

	public static final byte pawnB[][] = {
		{ 8 },
		{ 9 },
		{ 10 },
		{ 11 },
		{ 12 },
		{ 13 },
		{ 14 },
		{ 15 },
		{ 16, 24 },
		{ 17, 25 },
		{ 18, 26 },
		{ 19, 27 },
		{ 20, 28 },
		{ 21, 29 },
		{ 22, 30 },
		{ 23, 31 },
		{ 24 },
		{ 25 },
		{ 26 },
		{ 27 },
		{ 28 },
		{ 29 },
		{ 30 },
		{ 31 },
		{ 32 },
		{ 33 },
		{ 34 },
		{ 35 },
		{ 36 },
		{ 37 },
		{ 38 },
		{ 39 },
		{ 40 },
		{ 41 },
		{ 42 },
		{ 43 },
		{ 44 },
		{ 45 },
		{ 46 },
		{ 47 },
		{ 48 },
		{ 49 },
		{ 50 },
		{ 51 },
		{ 52 },
		{ 53 },
		{ 54 },
		{ 55 },
		{ 56 },
		{ 57 },
		{ 58 },
		{ 59 },
		{ 60 },
		{ 61 },
		{ 62 },
		{ 63 },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ }
	};

	public static final byte pawnWX[][] = {
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ 1 },
		{ 0, 2 },
		{ 1, 3 },
		{ 2, 4 },
		{ 3, 5 },
		{ 4, 6 },
		{ 5, 7 },
		{ 6 },
		{ 9 },
		{ 8, 10 },
		{ 9, 11 },
		{ 10, 12 },
		{ 11, 13 },
		{ 12, 14 },
		{ 13, 15 },
		{ 14 },
		{ 17 },
		{ 16, 18 },
		{ 17, 19 },
		{ 18, 20 },
		{ 19, 21 },
		{ 20, 22 },
		{ 21, 23 },
		{ 22 },
		{ 25 },
		{ 24, 26 },
		{ 25, 27 },
		{ 26, 28 },
		{ 27, 29 },
		{ 28, 30 },
		{ 29, 31 },
		{ 30 },
		{ 33 },
		{ 32, 34 },
		{ 33, 35 },
		{ 34, 36 },
		{ 35, 37 },
		{ 36, 38 },
		{ 37, 39 },
		{ 38 },
		{ 41 },
		{ 40, 42 },
		{ 41, 43 },
		{ 42, 44 },
		{ 43, 45 },
		{ 44, 46 },
		{ 45, 47 },
		{ 46 },
		{ 49 },
		{ 48, 50 },
		{ 49, 51 },
		{ 50, 52 },
		{ 51, 53 },
		{ 52, 54 },
		{ 53, 55 },
		{ 54 }
	};

	public static final byte pawnBX[][] = {
		{ 9 },
		{ 8, 10 },
		{ 9, 11 },
		{ 10, 12 },
		{ 11, 13 },
		{ 12, 14 },
		{ 13, 15 },
		{ 14 },
		{ 17 },
		{ 16, 18 },
		{ 17, 19 },
		{ 18, 20 },
		{ 19, 21 },
		{ 20, 22 },
		{ 21, 23 },
		{ 22 },
		{ 25 },
		{ 24, 26 },
		{ 25, 27 },
		{ 26, 28 },
		{ 27, 29 },
		{ 28, 30 },
		{ 29, 31 },
		{ 30 },
		{ 33 },
		{ 32, 34 },
		{ 33, 35 },
		{ 34, 36 },
		{ 35, 37 },
		{ 36, 38 },
		{ 37, 39 },
		{ 38 },
		{ 41 },
		{ 40, 42 },
		{ 41, 43 },
		{ 42, 44 },
		{ 43, 45 },
		{ 44, 46 },
		{ 45, 47 },
		{ 46 },
		{ 49 },
		{ 48, 50 },
		{ 49, 51 },
		{ 50, 52 },
		{ 51, 53 },
		{ 52, 54 },
		{ 53, 55 },
		{ 54 },
		{ 57 },
		{ 56, 58 },
		{ 57, 59 },
		{ 58, 60 },
		{ 59, 61 },
		{ 60, 62 },
		{ 61, 63 },
		{ 62 },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ },
		{ }
	};

	public static final byte king[][] = {
		{ 8, 1, 9 },
		{ 9, 0, 2, 8, 10 },
		{ 10, 1, 3, 9, 11 },
		{ 11, 2, 4, 10, 12 },
		{ 12, 3, 5, 11, 13 },
		{ 13, 4, 6, 12, 14 },
		{ 14, 5, 7, 13, 15 },
		{ 15, 6, 14 },
		{ 0, 16, 9, 1, 17 },
		{ 1, 17, 8, 10, 0, 2, 16, 18 },
		{ 2, 18, 9, 11, 1, 3, 17, 19 },
		{ 3, 19, 10, 12, 2, 4, 18, 20 },
		{ 4, 20, 11, 13, 3, 5, 19, 21 },
		{ 5, 21, 12, 14, 4, 6, 20, 22 },
		{ 6, 22, 13, 15, 5, 7, 21, 23 },
		{ 7, 23, 14, 6, 22 },
		{ 8, 24, 17, 9, 25 },
		{ 9, 25, 16, 18, 8, 10, 24, 26 },
		{ 10, 26, 17, 19, 9, 11, 25, 27 },
		{ 11, 27, 18, 20, 10, 12, 26, 28 },
		{ 12, 28, 19, 21, 11, 13, 27, 29 },
		{ 13, 29, 20, 22, 12, 14, 28, 30 },
		{ 14, 30, 21, 23, 13, 15, 29, 31 },
		{ 15, 31, 22, 14, 30 },
		{ 16, 32, 25, 17, 33 },
		{ 17, 33, 24, 26, 16, 18, 32, 34 },
		{ 18, 34, 25, 27, 17, 19, 33, 35 },
		{ 19, 35, 26, 28, 18, 20, 34, 36 },
		{ 20, 36, 27, 29, 19, 21, 35, 37 },
		{ 21, 37, 28, 30, 20, 22, 36, 38 },
		{ 22, 38, 29, 31, 21, 23, 37, 39 },
		{ 23, 39, 30, 22, 38 },
		{ 24, 40, 33, 25, 41 },
		{ 25, 41, 32, 34, 24, 26, 40, 42 },
		{ 26, 42, 33, 35, 25, 27, 41, 43 },
		{ 27, 43, 34, 36, 26, 28, 42, 44 },
		{ 28, 44, 35, 37, 27, 29, 43, 45 },
		{ 29, 45, 36, 38, 28, 30, 44, 46 },
		{ 30, 46, 37, 39, 29, 31, 45, 47 },
		{ 31, 47, 38, 30, 46 },
		{ 32, 48, 41, 33, 49 },
		{ 33, 49, 40, 42, 32, 34, 48, 50 },
		{ 34, 50, 41, 43, 33, 35, 49, 51 },
		{ 35, 51, 42, 44, 34, 36, 50, 52 },
		{ 36, 52, 43, 45, 35, 37, 51, 53 },
		{ 37, 53, 44, 46, 36, 38, 52, 54 },
		{ 38, 54, 45, 47, 37, 39, 53, 55 },
		{ 39, 55, 46, 38, 54 },
		{ 40, 56, 49, 41, 57 },
		{ 41, 57, 48, 50, 40, 42, 56, 58 },
		{ 42, 58, 49, 51, 41, 43, 57, 59 },
		{ 43, 59, 50, 52, 42, 44, 58, 60 },
		{ 44, 60, 51, 53, 43, 45, 59, 61 },
		{ 45, 61, 52, 54, 44, 46, 60, 62 },
		{ 46, 62, 53, 55, 45, 47, 61, 63 },
		{ 47, 63, 54, 46, 62 },
		{ 48, 57, 49 },
		{ 49, 56, 58, 48, 50 },
		{ 50, 57, 59, 49, 51 },
		{ 51, 58, 60, 50, 52 },
		{ 52, 59, 61, 51, 53, },
		{ 53, 60, 62, 52, 54 },
		{ 54, 61, 63, 53, 55 },
		{ 55, 62, 54 }
	};
}